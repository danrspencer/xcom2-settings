;A configuration File
DownThrottleUnitCount = 12  ; Number of enemies engaged to activate Down Throttling.
UpThrottleTurnCount = 2    ; Number of turns to pass before activating Up Throttling.
DownThrottleGroupRange = 50; Distance (meters) in which any non-engaged groups will be steered away as part of the Down Throttling effects. 
RetreatCap = -1			   ; Max number of units that can fall back to the objective area (or nearest guard group).  -1 == no limit.
;
-MaxEngagedEnemies[0] = 4  ; Rookie
+MaxEngagedEnemies[0] = 6   ; Rookie
+MaxEngagedEnemies[1] = 8   ; Veteran
-MaxEngagedEnemies[1] = 6   ; Veteran
-MaxEngagedEnemies[2] = 6  ; Commander
+MaxEngagedEnemies[2] = 14   ; Commander

;
FallbackChance=0.85f ; Chance to fall back to mission objective when unit is the last remaining unit in a multi-unit group
;
-AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1)
+AoEProfiles=( Profile=GrenadeProfile, Ability=ThrowGrenade, bUsePrecomputePath=1, bFailOnFriendlyFire=1 MinTargets=1)
-AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1)
+AoEProfiles=( Profile=GrenadeAggressiveProfile, Ability=ThrowGrenade, bUsePrecomputePath=1 MinTargets=1) 
; --------------------- Assorted constants ------------------------------------
;Ideal Range defaults
DefaultIdealRange=12.0f
; Tile Distance Score Calculation constants
CALC_RANGE_NUMERATOR=10  ; CurrentTileScore value = CALC_RANGE_NUMERATOR / (| DTE - IR |*CALC_RANGE_DENOM_FACTOR + CALC_RANGE_DENOM_ADDEND).
CALC_RANGE_DENOM_ADDEND=10 ;  CurrentTileScore value = CALC_RANGE_NUMERATOR / (| DTE - IR |*CALC_RANGE_DENOM_FACTOR + CALC_RANGE_DENOM_ADDEND).
CALC_RANGE_DENOM_FACTOR=1;    CurrentTileScore value = CALC_RANGE_NUMERATOR / (| DTE - IR |*CALC_RANGE_DENOM_FACTOR + CALC_RANGE_DENOM_ADDEND).
bCALC_RANGE_LINEAR=true;     // If true, use linear distance scoring instead of inverse.  Score=  (1 - |DTE-IR|/CALC_RANGE_LINEAR_DENOM.)
CALC_RANGE_LINEAR_DENOM=16 ;   CurrentTileScore value =  (1 - |DTE-IR|/CALC_RANGE_LINEAR_DENOM).
CURR_TILE_LINGER_PENALTY=1.0;  Multiplier on current location distance score to lower the value of the current tile and promote movement.
; Tile Cover Score calculation constants
CALC_NO_COVER_FACTOR=-4.0f ; Used in weighting each cover location.  One location can have different cover values
CALC_MID_COVER_FACTOR=1.0f ; depending on multiple enemy positions around that location.  On one side it can have full
CALC_FULL_COVER_FACTOR=2.5f ; cover to one enemy, another side can have no cover.  CoverScore= avg of all cover values per known enemy.
CALC_FULL_COVER_FACTOR_POD_LEADER=2.5f ;  Leaders of groups will prioritize full cover to a greater degree.
;  Default spread values.  These can be overriden per character in the character template, vars AIMinSpreadDist and AISpreadMultiplier.
DEFAULT_AI_MIN_SPREAD_DISTANCE=6.0f   ; default distance (meters) from teammates to prefer to stay away.  Should be about double an AoE radius.
									; All destination tiles within this range of a teammate will get their tile score reduced.
DEFAULT_AI_SPREAD_WEIGHT_MULTIPLIER=0.2f ;destination scores get multiplied by this value for tile locations adjacent to teammates.
			; The spread multiplier value increases linearly to 1.0 as distance from nearest teammate increases to DEFAULT_AI_MIN_SPREAD_DISTANCE.

MIN_SURPRISED_SCAMPER_PATH_LENGTH=1 ; Scamper paths will never be cut short less than this number of tiles. 
            ; (A surprised scampering unit that has its best cover destination within this number of tiles will get into cover)
MAX_SURPRISED_SCAMPER_PATH_LENGTH=8 ; Scamper paths longer than this number of tiles will be cut to this number of tiles.
			; Scamper paths less than the max will be cut short randomly between the min and the max values here.
AoERepeatAttackExclusionList="ScythingClaws"  ;Ignore ScythingClaws when avoiding attacks on the same AoE targets.  

; 66% chance to PsiReanimate, 33% chance to Mind Spin ( if both are available ).  Otherwise use whatever is available. Changing to 90% Spin, 10% Reanimate
Behaviors=(BehaviorName=TryPsiReanimationOrMindSpinOption, NodeType=RandSelector, Child[0]=TryPsiReanimation, Param[0]=10, Child[1]=TryMindSpinOption, Param[1]=90)
Behaviors=(BehaviorName=TryMindSpinOption, NodeType=Sequence, Child[0]=IsAbilityAvailable-MindSpin, Child[1]=SelectTargetForMindSpin, Child[2]=SelectAbility-MindSpin)

; -------------------- Panicking Entity -----------------------------------------
Behaviors=(BehaviorName=PanickedRoot, NodeType=Selector, Child[0]=Panicked_FirstAction, Child[1]=Panicked_LastAction, Child[2]=SkipMove)

Behaviors=(BehaviorName=Panicked_FirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Panicked_FirstAction_Selector);
Behaviors=(BehaviorName=Panicked_FirstAction_Selector, NodeType=Selector, \\
	Child[0]=PanickedMove, \\
	Child[1]=PanickedAction, \\
	Child[2]=SkipMove)

Behaviors=(BehaviorName=Panicked_LastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Panicked_LastAction_Selector)
Behaviors=(BehaviorName=Panicked_LastAction_Selector, NodeType=Selector, \\
	Child[0]=PanickedAction, \\
	Child[1]=PanickedMove, \\
	Child[2]=SkipMove)

-Behaviors=(BehaviorName=PanickedMove, NodeType=Selector, Child[0]=PanickedFallBackUnsafe, Child[1]=MoveDefensiveWithLoSUnsafe, Child[2]=MoveDefensiveUnsafe)
+Behaviors=(BehaviorName=PanickedMove, NodeType=Selector, Child[0]=MoveDefensive)
-Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector,      Child[0]=ShootRandomTargetForPanic, Param[0]=5,      Child[1]=TryPanickedGrenadeToss, Param[1]=1,      Child[2]=DoCower, Param[2]=2)
+Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, Child[0]=DoCower, Param[0]=50, Child[1]=MoveDefensive, Param[1]=50)

; -------------------- Scamper Root -----------------------------------
-Behaviors=(BehaviorName=GenericScamperRoot, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveStandardWithLoSUnsafe, \\
		Child[2]=MoveStandardUnsafe, \\
		Child[3]=SkipMove)

+Behaviors=(BehaviorName=GenericScamperRoot, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveStandardWithLoSUnsafe, \\
		Child[2]=MoveStandardUnsafe, \\
		Child[3]=TryOverwatch, \\
		Child[4]=SkipMove)
-Behaviors=(BehaviorName=ScamperRoot_Soldier, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveDefensiveWithLoSUnsafe, \\
		Child[2]=MoveStandardUnsafe, \\
		Child[3]=SkipMove)
+Behaviors=(BehaviorName=ScamperRoot_Soldier, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveDefensiveWithLoSUnsafe, \\
		Child[2]=MoveDefensiveUnsafe, \\
		Child[3]=MoveStandardUnsafe, \\
		Child[4]=TryOverwatch, \\
		Child[5]=SkipMove)
Behaviors=(BehaviorName=ScamperRoot_Flanker, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveFlankingUnsafe, \\
		Child[2]=MoveStandardWithLoSUnsafe, \\
		Child[3]=MoveStandardUnsafe, \\
		Child[4]=SkipMove)
Behaviors=(BehaviorName=ScamperRoot_NoCover, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveNoCoverUnsafe, \\
		Child[2]=SkipMove)
Behaviors=(BehaviorName=ScamperRoot_Overwatch, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=OverwatchIfTargetAvailable, \\
		Child[2]=MoveNoCoverUnsafe, \\
		Child[3]=SkipMove)
Behaviors=(BehaviorName=ScamperRoot_MeleeNoCover, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=MoveMeleeFANATICUnsafe, \\
		Child[2]=MoveNoCoverUnsafe, \\
		Child[3]=SkipMove)

Behaviors=(BehaviorName=CounterBeaglerushManeuver, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget, Child[2]=ShootTargetChanceOnScamper)
Behaviors=(BehaviorName=SelectFlankedEnemyTarget, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets, Child[2]=HasValidTarget-StandardShot)
Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies)
Behaviors=(BehaviorName=EvaluateFlankedEnemies, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy, Child[2]=UpdateBestTarget)
Behaviors=(BehaviorName=SSScoreFlankedEnemy, NodeType=Successor, Child[0]=ScoreFlankedEnemy)

Behaviors=(BehaviorName=IsActiveTeam-eTeam_XCom, NodeType=Condition)
Behaviors=(BehaviorName=NotActiveTeamXCom, NodeType=Inverter, Child[0]=IsActiveTeam-eTeam_XCom)

Behaviors=(BehaviorName=ScoreFlankedEnemy, NodeType=Sequence, Child[0]=IsTargetScamperInstigator, Child[1]=WasTargetPreviouslyConcealed, Child[2]=NotActiveTeamXCom, Child[3]=IsFlankingTarget, Child[4]=TargetIsEnemy, Child[5]=TargetNotMindControlled, Child[6]=TargetNotBoundOrPanicked, Child[7]=GenericTargetEvaluations)
Behaviors=(BehaviorName=TargetNotMindControlled, NodeType=Inverter, Child[0]=TargetAffectedByEffect-MindControl)
Behaviors=(BehaviorName=TargetNotBoundOrPanicked, NodeType=Inverter, Child[0]=IsLastResortTarget)
Behaviors=(BehaviorName=TargetAffectedByEffect-MindControl, NodeType=Condition)
Behaviors=(BehaviorName=IsTargetScamperInstigator, NodeType=Condition)
Behaviors=(BehaviorName=WasTargetPreviouslyConcealed, NodeType=Condition)

Behaviors=(BehaviorName=ShootTargetChanceOnScamper, NodeType=RandFilter, Child[0]=SelectAbility-StandardShot, Param[0]=50)

Behaviors=(BehaviorName=AllShotPercentagesBelow50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<", Param[2]="50")
Behaviors=(BehaviorName=AllShotPercentagesAtOrBelow50, NodeType=StatCondition, Param[0]=TopHitChance, Param[1]="<=", Param[2]="50")
; *********************************************************************************************************************
; ***                                            CUSTOM BEHAVIORS BY ENEMY                                          ***
; *********************************************************************************************************************
; -------------------- ADVENT Trooper AI BEHAVIOR TREE NODES BEGIN ------------
-Behaviors=(BehaviorName="AdventTrooper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_RedAlert, Child[3]=GenericAlertHandler)
-Behaviors=(BehaviorName=AdvTrooper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_RedAbilitySelector)
-Behaviors=(BehaviorName=AdvTrooper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventRedFirstAction, Child[2]=AdventRedLastAction)

+Behaviors=(BehaviorName="AdventTrooper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvTrooper_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvTrooper_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvTrooper_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvTrooper_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventRedFirstAction, Child[2]=AdventRedLastAction)

-Behaviors=(BehaviorName=AdventRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventRedFirstActionSelector)
-Behaviors=(BehaviorName=AdventRedFirstActionSelector, NodeType=Selector, \\
	-Child[0]=DoIfFlankedMove, \\
	-Child[1]=SelectMove_JobOrAggressive, \\
	-Child[2]=TryMoveThenGrenade, \\
	-Child[3]=TryShootOrReloadOrOverwatch, \\
	-Child[4]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdventRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventRedFirstActionSelector)
+Behaviors=(BehaviorName=AdventRedFirstActionSelector, NodeType=Selector, \\
	+Child[0]=DoIfFlankedMove, \\
	+Child[1]=SelectMove_JobOrAggressive, \\
	+Child[2]=TryShootOrReloadOrOverwatch, \\
	+Child[3]=TryMoveThenGrenade, \\
	+Child[4]=HuntEnemyWithCover)
-Behaviors=(BehaviorName=AdventRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventRedLastActionSelector)
-Behaviors=(BehaviorName=AdventRedLastActionSelector, NodeType=Selector, \\
	-Child[0]=TryGrenade, \\
	-Child[1]=TryShootOrReloadOrOverwatch, \\
	-Child[2]=HuntEnemyWithCover, \\
	-Child[3]=SelectMove_JobOrAggressive)

+Behaviors=(BehaviorName=AdventRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventRedLastActionSelector)
+Behaviors=(BehaviorName=AdventRedLastActionSelector, NodeType=Selector, \\
	+Child[0]=TryShootOrReloadOrOverwatch, \\
	+Child[1]=TryGrenade, \\
	+Child[2]=HuntEnemyWithCover, \\
	+Child[3]=SelectMove_JobOrAggressive)

	; -------------------- ADVENT Captain AI BEHAVIOR TREE NODES BEGIN ------------
; Mark Target is Active(Q), CD 5, so safe for first action.
-Behaviors=(BehaviorName="AdventCaptain::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_RedAlert, Child[3]=GenericAlertHandler)
-Behaviors=(BehaviorName=AdvCaptain_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvCaptain_RedAbilitySelector)
-Behaviors=(BehaviorName=AdvCaptain_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdvCaptain_RedFirstAction, Child[2]=AdvCaptain_RedLastAction)
+Behaviors=(BehaviorName="AdventCaptain::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvCaptain_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdvCaptain_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvCaptain_RedAbilitySelector)
+Behaviors=(BehaviorName=AdvCaptain_RedAbilitySelector, NodeType=Selector, Child[0]=AdvCaptain_RedFirstAction, Child[1]=AdvCaptain_RedLastAction)

-Behaviors=(BehaviorName=AdvCaptain_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvCaptain_RedFirstActionSelector)
-Behaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector, \\
	-Child[0]=DoIfFlankedMove, \\
	-Child[1]=TryMarkTargetOption, \\
	-Child[2]=SelectMove_JobOrDefensive, \\
	-Child[3]=AdvCaptainTryMoveThenGrenade, \\
	-Child[4]=TryShootOrReloadOrOverwatch, \\
	-Child[5]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdvCaptain_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdvCaptain_RedFirstActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_RedFirstActionSelector, NodeType=Selector, \\
	+Child[0]=DoIfFlankedMove, \\
	+Child[1]=TryMarkTargetOption, \\
	+Child[2]=SelectMove_JobOrDefensive, \\
	+Child[3]=AdvCaptainTryMoveThenGrenade, \\
	+Child[4]=TryShootOrReloadOrOverwatch, \\
	+Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=AdvCaptain_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvCaptain_RedLastActionSelector)
-Behaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, \\
	-Child[0]=TryMarkTargetOption, \\
	-Child[1]=AdvCaptainTryGrenade, \\
	-Child[2]=TryShootOrReloadOrOverwatch, \\
	-Child[3]=HuntEnemyWithCover, \\
	-Child[4]=SelectMove_JobOrDefensive)

+Behaviors=(BehaviorName=AdvCaptain_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdvCaptain_RedLastActionSelector)
+Behaviors=(BehaviorName=AdvCaptain_RedLastActionSelector, NodeType=Selector, \\
	+Child[0]=AdvCaptainTryGrenade, \\
	+Child[1]=TryShootOrReloadOrOverwatch, \\
	+Child[2]=TryMarkTargetOption, \\
	+Child[3]=HuntEnemyWithCover, \\
	+Child[4]=SelectMove_JobOrDefensive)

-Behaviors=(BehaviorName=AdvCaptainTryMoveThenGrenade, NodeType=Sequence, Child[0]=IsAdvCaptainQualifiedForGrenade, Child[1]=TryMoveThenGrenade)
-Behaviors=(BehaviorName=AdvCaptainTryGrenade, NodeType=Sequence, Child[0]=IsAdvCaptainQualifiedForGrenade, Child[1]=TryGrenade)
-Behaviors=(BehaviorName=IsAdvCaptainQualifiedForGrenade, NodeType=Selector, Child[0]=NotAdvCaptainM1, Child[1]=IsDifficultyAboveNormal)
-Behaviors=(BehaviorName=NotAdvCaptainM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvCaptainM1)
-Behaviors=(BehaviorName=TemplateNameIs-AdvCaptainM1, NodeType=Condition)
+Behaviors=(BehaviorName=AdvCaptainTryMoveThenGrenade, NodeType=Sequence, Child[0]=IsAdvCaptainQualifiedForGrenade, Child[1]=TryMoveThenGrenade)
+Behaviors=(BehaviorName=AdvCaptainTryGrenade, NodeType=Sequence, Child[0]=IsAdvCaptainQualifiedForGrenade, Child[1]=TryGrenade)
+Behaviors=(BehaviorName=IsAdvCaptainQualifiedForGrenade, NodeType=Selector, Child[0]=NotAdvCaptainM1, Child[1]=IsDifficultyAboveNormal)
+Behaviors=(BehaviorName=NotAdvCaptainM1, NodeType=Inverter, Child[0]=TemplateNameIs-AdvCaptainM1)
+Behaviors=(BehaviorName=TemplateNameIs-AdvCaptainM1, NodeType=Condition)

; -------------------- ADVENT Stun Lancer AI BEHAVIOR TREE NODES BEGIN --------
-Behaviors=(BehaviorName="AdventStunLancer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdventSL_RedAlert, Child[3]=GenericAlertHandler)
-Behaviors=(BehaviorName=AdventSL_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdventSL_RedAbilitySelector)
-Behaviors=(BehaviorName=AdventSL_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventSLFirstAction, Child[2]=AdventSLLastAction)
+Behaviors=(BehaviorName="AdventStunLancer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdventSL_RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=AdventSL_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdventSL_RedAbilitySelector)
+Behaviors=(BehaviorName=AdventSL_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AdventSLFirstAction, Child[2]=AdventSLLastAction)

-Behaviors=(BehaviorName=AdventSLFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventSLFirstActionSelector)
-Behaviors=(BehaviorName=AdventSLFirstActionSelector, NodeType=Selector, \\
	-Child[0]=TryStunLance, \\
	-Child[1]=DoIfFlankedMove, \\
	-Child[2]=SelectMove_JobOrMelee, \\
	-Child[3]=TryMoveThenGrenade, \\
	-Child[4]=TryShootOrReloadOrOverwatch, \\
	-Child[5]=HuntEnemyWithCover)
+Behaviors=(BehaviorName=AdventSLFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AdventSLFirstActionSelector)
+Behaviors=(BehaviorName=AdventSLFirstActionSelector, NodeType=Selector, \\
	+Child[0]=TryStunLance, \\
	+Child[1]=DoIfFlankedMove, \\
	+Child[2]=SelectMove_JobOrMelee, \\
	+Child[3]=TryMoveThenGrenade, \\
	+Child[4]=TryShootOrReloadOrOverwatch, \\
	+Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=AdventSLLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventSLLastActionSelector)
-Behaviors=(BehaviorName=AdventSLLastActionSelector, NodeType=Selector, \\
	-Child[0]=TryStunLance, \\
	-Child[1]=TryGrenade, \\
	-Child[2]=TryShootOrReloadOrOverwatch, \\
	-Child[3]=HuntEnemyWithCover, \\
	-Child[4]=SelectMove_JobOrMelee)
+Behaviors=(BehaviorName=AdventSLLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AdventSLLastActionSelector)
+Behaviors=(BehaviorName=AdventSLLastActionSelector, NodeType=Selector, \\
	+Child[0]=TryStunLance, \\
	+Child[1]=TryGrenade, \\
	+Child[2]=TryShootOrReloadOrOverwatch, \\
	+Child[3]=HuntEnemyWithCover, \\
	+Child[4]=SelectMove_JobOrMelee)

; -------------------- ADVENT ShieldBearer AI BEHAVIOR TREE NODES BEGIN -------
; energy shield looking for multiple targets disabled, because currently, it only targets self.
; Energy Shield is Active(ET)
Behaviors=(BehaviorName="AdventShieldBearer::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AdvShieldBearer_RedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=AdvShieldBearer_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AdvShieldBearer_RedAbilitySelector)
Behaviors=(BehaviorName=AdvShieldBearer_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ShieldBearerFirstAction, Child[2]=ShieldBearerLastAction)

Behaviors=(BehaviorName=ShieldBearerFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ShieldBearerFirstActionSelector)
Behaviors=(BehaviorName=ShieldBearerFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveForEnergyShield, \\
	Child[1]=TryEnergyShieldOnMultipleTargets, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=SelectMove_JobOrDefensive, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=TryShootOrReloadOrOverwatch)
Behaviors=(BehaviorName=TryMoveForEnergyShield, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-EnergyShield, Child[2]=NotLastActionPoint, Child[3]=MoveStandardIfFirstAbility-EnergyShield)


Behaviors=(BehaviorName=ShieldBearerLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ShieldBearerLastActionSelector)
Behaviors=(BehaviorName=ShieldBearerLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnAnyTarget, \\
	Child[1]=TryShootOrReloadOrOverwatch,  \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrDefensive)

; -------------------- ADVENT MEC ---------------------------------------------
; only real differencve between this and advent soldier should be more aggressive positioning and suppression
; MicroMissiles is an Active(2)

Behaviors=(BehaviorName="AdventMEC::CharacterRoot", NodeType=Selector, Child[0]=MecMk1Branch, Child[1]=AdvMECMk2_Root)
Behaviors=(BehaviorName=MecMk1Branch, NodeType=Sequence, Child[0]=TemplateNameIs-AdvMEC_M1, Child[1]=AdvMEC_Root)
Behaviors=(BehaviorName=TemplateNameIs-AdvMEC_M1, NodeType=Condition)

Behaviors=(BehaviorName=AdvMEC_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=MECRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MECRedAbilitySelector)
Behaviors=(BehaviorName=MECRedAbilitySelector, NodeType=Selector, Child[0]=MECRedFirstAction, Child[1]=MECRedLastAction)

Behaviors=(BehaviorName=MECRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECFirstActionSelector)
Behaviors=(BehaviorName=MECFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissiles, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)

Behaviors=(BehaviorName=MECRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MECRedLastActionSelector)
Behaviors=(BehaviorName=MECRedLastActionSelector, NodeType=Selector,\\
	Child[0]=TryMicroMissiles, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)

; -------------------- ADVENT MEC Mk2 -----------------------------------------
; only real differencve between this and advent soldier should be more aggressive positioning and suppression
; MicroMissiles is an Active(2)
; MEC Mk 2 can target only a single enemy with its micro missiles.

Behaviors=(BehaviorName=AdvMECMk2_Root, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MECMk2RedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=MECMk2RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MECMk2RedAbilitySelector)
Behaviors=(BehaviorName=MECMk2RedAbilitySelector, NodeType=Selector, Child[0]=MECMk2RedFirstAction, Child[1]=MECMk2RedLastAction)

Behaviors=(BehaviorName=MECMk2RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MECMk2FirstActionSelector)
Behaviors=(BehaviorName=MECMk2FirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissilesMk2, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)

Behaviors=(BehaviorName=MECMk2RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MECMk2RedLastActionSelector)
Behaviors=(BehaviorName=MECMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMicroMissilesMk2, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)

; -------------------- ADVENT PsiWitch ---------------------------------------------
;Behaviors=(BehaviorName=AdvPsiWitch_Root, NodeType=Selector, Child[0]=GenericGreenMovement, Child[1]=AdvTrooper_RedAlert, Child[2]=GenericAlertHandler)
Behaviors=(BehaviorName="AdventPsiWitch::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PsiWitchRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=PsiWitchRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=PsiWitchRedAbilitySelector)
Behaviors=(BehaviorName=PsiWitchRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=PsiWitchRedFirstAction, Child[2]=PsiWitchRedLastAction)

Behaviors=(BehaviorName=PsiWitchRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=PsiWitchRedFirstActionSelector)
Behaviors=(BehaviorName=PsiWitchRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenPsiMindControl, \\
	Child[1]=TryMoveThenDimensionalRift, \\
	Child[2]=TryMoveThenNullLance, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=PsiWitchAttackSequencer, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=TryShootOrReloadOrOverwatch)

Behaviors=(BehaviorName=PsiWitchRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=PsiWitchRedLastActionSelector)
Behaviors=(BehaviorName=PsiWitchRedLastActionSelector, NodeType=Selector, \\
	Child[0]=PsiWitchAttackSequencer, \\
	Child[1]=SelectMoveStandard, \\
	Child[2]=HuntEnemyWithCover)

Behaviors=(BehaviorName=PsiWitchAttackSequencer, NodeType=Selector, \\
	Child[0]=TryPsiMindControl, \\
	Child[1]=TryDimensionalRift, \\
	Child[2]=TryNullLance, \\
	Child[3]=TryShootOrReloadOrOverwatch)

; -------------------- ADVENT Turret AI BEHAVIOR TREE NODES BEGIN -------------
Behaviors=(BehaviorName="AdventTurret::CharacterRoot", NodeType=Selector, Child[0]=Turret_RedAlert, Child[1]=SkipMove) ; , Child[1]=TryOverwatch)
Behaviors=(BehaviorName=Turret_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=TurretRedAbilitySelector)

Behaviors=(BehaviorName=TurretRedAbilitySelector, NodeType=Selector, \\
	Child[0]=TurretRedFirstActionSelector, \\
	Child[1]=ConsiderTakingOverwatch
	Child[2]=Turret_TryShootOrReload)

Behaviors=(BehaviorName=TurretRedFirstActionSelector, NodeType=Sequence, \\
	Child[0]=NotLastActionPoint, \\
	Child[1]=Turret_TryShootOrReload)

Behaviors=(BehaviorName=Turret_TryShootOrReload, NodeType=Selector, Child[0]=Turret_ShootIfAvailable, Child[1]=NeedsReload)

Behaviors=(BehaviorName=Turret_ShootIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=Turret_SelectTargetForStandardShot, Child[2]=SelectAbility-StandardShot)

Behaviors=(BehaviorName=Turret_SelectTargetForStandardShot, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=TurretSelectBestTarget, Child[2]=HasValidTarget-StandardShot)
Behaviors=(BehaviorName=TurretSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=TurretEvaluateTarget)
Behaviors=(BehaviorName=TurretEvaluateTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreHitChance, Child[2]=GenericScoreTargetRandomly, Child[3]=TargetScoreInvalidateCivilians, Child[4]=TargetScoreInvalidatePriorityObject, Child[5]=UpdateBestTarget)
Behaviors=(BehaviorName=TargetScoreInvalidatePriorityObject, NodeType=Successor, Child[0]=ScoreTargetOutIfPriorityObject)
Behaviors=(BehaviorName=ScoreTargetOutIfPriorityObject, NodeType=Sequence, Child[0]=TargetIsPriorityObject, Child[1]=AddToTargetScore_-1000)


; -------------------- Andromedon ---------------------------------------------
;Behaviors=(BehaviorName=AndromedonRoot, NodeType=Selector, Child[0]=GenericRedAlert, Child[1]=GenericAlertHandler)
; Acid Blob is Active(ET) CD3

Behaviors=(BehaviorName="Andromedon::CharacterRoot", NodeType=Selector, Child[0]=AndromedonRobotBranch, Child[1]=AndromedonRoot)
Behaviors=(BehaviorName=AndromedonRobotBranch, NodeType=Sequence, Child[0]=TemplateNameIs-AndromedonRobot, Child[1]=AndromedonRobotRoot)
Behaviors=(BehaviorName=TemplateNameIs-AndromedonRobot, NodeType=Condition)

Behaviors=(BehaviorName=AndromedonRoot, NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=AndromedonRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=AndromedonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=AndromedonRedAbilitySelector)
Behaviors=(BehaviorName=AndromedonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=AndromedonRedFirstAction, Child[2]=AndromedonRedLastAction)

Behaviors=(BehaviorName=AndromedonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=AndromedonRedFirstActionSelector)
Behaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryMoveThenAcidBlob, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=SelectMoveStandard, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

Behaviors=(BehaviorName=AndromedonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=AndromedonRedLastActionSelector)
Behaviors=(BehaviorName=AndromedonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryAcidBlob, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMoveStandard)

; -------------------- Andromedon Robot ---------------------------------------
Behaviors=(BehaviorName="AndromedonRobot::CharacterRoot", NodeType=Selector, Child[0]=GenericEnemyMeleeRootFANATIC)
Behaviors=(BehaviorName=AndromedonRobotRoot, NodeType=Selector, Child[0]=GenericEnemyMeleeRootFANATIC)

; -------------------- Archon -------------------------------------------------
; Blazing Pinions is an Active(1) 
Behaviors=(BehaviorName="Archon::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ArchonRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=ArchonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ArchonRedAbilitySelector)
Behaviors=(BehaviorName=ArchonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ArchonRedFirstAction, Child[2]=ArchonRedLastAction)

Behaviors=(BehaviorName=ArchonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ArchonFirstActionSelector)
Behaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedMoveAndAttack, \\
	Child[1]=TryMoveThenBlazingPinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

Behaviors=(BehaviorName=TryMoveThenBlazingPinions, NodeType=Selector, Child[0]=TryMoveForBlazingPinions, Child[1]=TryBlazingPinions)
Behaviors=(BehaviorName=TryMoveForBlazingPinions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BlazingPinionsStage1, Child[2]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[3]=MoveStandardIfFirstAbility-BlazingPinions)

Behaviors=(BehaviorName=ArchonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ArchonRedLastActionSelector)
Behaviors=(BehaviorName=ArchonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedAttack, \\
	Child[1]=TryBlazingPinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy, \\
	Child[5]=SelectMoveStandard)

Behaviors=(BehaviorName=TryFrenziedAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryStandardMelee)
Behaviors=(BehaviorName=TryFrenziedMoveAndAttack, NodeType=Sequence, Child[0]=AffectedByEffect-FrenzyEffect, Child[1]=TryAttackOrDashAndAttack)
Behaviors=(BehaviorName=TryAttackOrDashAndAttack, NodeType=Selector, Child[0]=TryStandardMelee, Child[1]=TryStandardMeleeDashFANATICUnsafe)
; -------------------- Berseker -----------------------------------------------
  ; ("Try Standard Melee" includes "attempt to move to melee range")

Behaviors=(BehaviorName="Berserker::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement, Child[2]=BerserkerMeleeRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=BerserkerMeleeRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Berserker_RedAbilitySelector)
Behaviors=(BehaviorName=Berserker_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=BerserkerRedFirstAction, Child[2]=BerserkerRedLastAction);

Behaviors=(BehaviorName=BerserkerRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=BerserkerRedFirstActionSelector)
Behaviors=(BehaviorName=BerserkerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBerserkerMelee, \\
	Child[1]=MoveMeleeDashFANATICUnsafe, \\
	Child[2]=HuntEnemyUnsafe)

Behaviors=(BehaviorName=BerserkerRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=BerserkerRedLastActionSelector)
Behaviors=(BehaviorName=BerserkerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBerserkerMelee, \\
	Child[1]=MoveMeleeDashFANATICUnsafe, \\
	Child[2]=HuntEnemyUnsafe)

; -------------------- Chryssalid ---------------------------------------------
; Updated chryssalid job-behavior to only permit jobs that should override basic move and burrow behavior.
Behaviors=(BehaviorName="Chryssalid::CharacterRoot", NodeType=Selector, Child[0]=ChryssalidCocoonBranch, Child[1]=ChryssalidRoot)
Behaviors=(BehaviorName=ChryssalidCocoonBranch, NodeType=Sequence, Child[0]=IsChryssalidCocoon, Child[1]=CocoonRoot)
Behaviors=(BehaviorName=IsChryssalidCocoon, NodeType=Selector, Child[0]=TemplateNameIs-ChryssalidCocoon, Child[1]=TemplateNameIs-ChryssalidCocoonHuman)
Behaviors=(BehaviorName=TemplateNameIs-ChryssalidCocoon, NodeType=Condition)
Behaviors=(BehaviorName=TemplateNameIs-ChryssalidCocoonHuman, NodeType=Condition)

Behaviors=(BehaviorName=ChryssalidRoot, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=SkipIfBurrowed, Child[2]=TryJobTerrorist, Child[3]=TryJobChargerUnsafe, Child[4]=ChryssalidGreenAlert, Child[5]=ChryssalidRedAlert, Child[6]=ChryssalidYellowAlert)
Behaviors=(BehaviorName=ChryssalidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ChryssalidRedAbilitySelector)
Behaviors=(BehaviorName=ChryssalidRedAbilitySelector, NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=MimicBeaconBehavior, Child[2]=ChryssalidRedActionSelector)
Behaviors=(BehaviorName=ChryssalidRedActionSelector, NodeType=Selector, \\
	Child[0]=TryMelee66, \\
	Child[1]=TryRunAndBurrow33)

Behaviors=(BehaviorName=TryMelee66, NodeType=Sequence, Child[0]=SSSetMeleeValueIfUnset, Child[1]=CheckMeleeUnder67, Child[2]=ChryssalidMeleeSelector)
Behaviors=(BehaviorName=SSSetMeleeValueIfUnset, NodeType=Successor, Child[0]=SetMeleeValueIfUnset)
Behaviors=(BehaviorName=SetMeleeValueIfUnset, NodeType=Sequence, Child[0]=MeleeValueUnset, Child[1]=SetMeleeValue)
Behaviors=(BehaviorName=MeleeValueUnset, NodeType=Inverter, Child[0]=HasUnitValue-MeleeChance)
Behaviors=(BehaviorName=HasUnitValue-MeleeChance, NodeType=Condition)
Behaviors=(BehaviorName=SetMeleeValue, NodeType=Selector, Child[0]=DisableBurrowChanceIfIneligible, Child[1]=SetRandUnitValue-MeleeChance)
Behaviors=(BehaviorName=DisableBurrowChanceIfIneligible, NodeType=Sequence, Child[0]=BurrowOptionNotAvailable, Child[1]=SetUnitValue-MeleeChance)
Behaviors=(BehaviorName=BurrowOptionNotAvailable, NodeType=Selector, Child[0]=IsAtEndOfAxisOfPlay, Child[1]=HasXComUnitsCloserToObjective)
Behaviors=(BehaviorName=HasXComUnitsCloserToObjective, NodeType=Condition, Param[0]=10); True when any XCom unit is more than Param[0] meters closer to objective.
Behaviors=(BehaviorName=IsAtEndOfAxisOfPlay, NodeType=StatCondition, Param[0]=ObjectiveDistance, Param[1]="<=", Param[2]=27) ;Check if within sight range of objective.  If so, do not bother with burrowing.
Behaviors=(BehaviorName=SetRandUnitValue-MeleeChance, NodeType=Action, Param[0]=100) ; Random chance to run away and burrow or fight. Param[1] DNE = Set once per mission.
Behaviors=(BehaviorName=SetUnitValue-MeleeChance, NodeType=Action, Param[0]=1) ;Disable chance to burrow again.
Behaviors=(BehaviorName=TryRunAndBurrow33, NodeType=Sequence, Child[0]=CheckMeleeOver67, Child[1]=ChryssalidRunAndBurrowSelector)
Behaviors=(BehaviorName=CheckMeleeUnder67, NodeType=StatCondition, Param[0]=UnitValue-MeleeChance, Param[1]="<", Param[2]=67)
Behaviors=(BehaviorName=CheckMeleeOver67, NodeType=StatCondition, Param[0]=UnitValue-MeleeChance, Param[1]=">=", Param[2]=67)
Behaviors=(BehaviorName=ChryssalidRunAndBurrowSelector, NodeType=Selector, Child[0]=BurrowIfOutOfView, Child[1]=TryDashMoveForBurrow)
Behaviors=(BehaviorName=BurrowIfOutOfView, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=TryBurrow)

Behaviors=(BehaviorName=ChryssalidMeleeSelector, NodeType=Selector, Child[0]=TryMeleeOnCivilian, Child[1]=TryStandardMeleeDashFANATICUnsafe, Child[2]=HuntEnemyUnsafe)
Behaviors=(BehaviorName=TryMeleeOnCivilian, NodeType=Sequence, Child[0]=NumKilledCiviliansIsLessThanTurnCount, Child[1]=HasVisibleCivilianInMoveRange, Child[2]=Rand50AttackCivilian)
Behaviors=(BehaviorName=HasVisibleCivilianInMoveRange, NodeType=Condition) ; Visible to both players, in move range to unit.
Behaviors=(BehaviorName=Rand50AttackCivilian, NodeType=RandFilter, Child[0]=MeleeAttackNearestCivilian, Param[0]=50)
Behaviors=(BehaviorName=MeleeAttackNearestCivilian, NodeType=Sequence, Child[0]=SelectClosestCivilianInRange, Child[1]=SelectAbility-StandardMelee)
Behaviors=(BehaviorName=SelectClosestCivilianInRange, NodeType=Sequence, Child[0]=SetTargetStack-StandardMelee, Child[1]=SelectClosestCivilianForStandardMelee, Child[2]=HasValidTarget-StandardMelee)
Behaviors=(BehaviorName=SelectClosestCivilianForStandardMelee, NodeType=RepeatUntilFail, Child[0]=EvaluateMeleeTargetForClosestCivilian)
Behaviors=(BehaviorName=EvaluateMeleeTargetForClosestCivilian, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestCivilianIfInRange, Child[2]=UpdateBestTarget)
Behaviors=(BehaviorName=TargetScoreClosestCivilianIfInRange, NodeType=Successor, Child[0]=ScoreClosestCivilianIfInRange)
Behaviors=(BehaviorName=ScoreClosestCivilianIfInRange, NodeType=Sequence, Child[0]=TargetIsCivilian, Child[1]=TargetIsNotAlien, Child[2]=IsTargetInMovementRange-StandardMelee, Child[3]=TargetScoreByScaledDistance-1, Child[4]=AddToTargetScore_100)

Behaviors=(BehaviorName=ChryssalidYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=ChryssalidYellowAbilitySelector)
Behaviors=(BehaviorName=ChryssalidYellowAbilitySelector, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=ChryssalidUnburrowedProtocol, Child[2]=TryJobUnsafe, Child[3]=GenericAlertHandler, Child[4]=SkipMove)

Behaviors=(BehaviorName=ChryssalidHeatSeekProtocol, NodeType=Sequence, Child[0]=ChryssalidShouldTriggerHeatSeek, Child[1]=AlertAndUnburrowOrHeatSeek)
Behaviors=(BehaviorName=ChryssalidShouldTriggerHeatSeek, NodeType=Selector, Child[0]=BurrowedAndEncounterBandPassed, Child[1]=BurrowedandLastGroupRemaining, Child[2]=IsUnitTypeVisible-MimicBeacon)
Behaviors=(BehaviorName=HasEncounterBandBeenPassed, NodeType=Condition)
Behaviors=(BehaviorName=BurrowedAndEncounterBandPassed, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=HasEncounterBandBeenPassed)
Behaviors=(BehaviorName=BurrowedandLastGroupRemaining, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=AreAllRemainingAlliesUnderEffect-Burrowed)
Behaviors=(BehaviorName=AreAllRemainingAlliesUnderEffect-Burrowed, NodeType=Condition)
Behaviors=(BehaviorName=AlertAndUnburrowOrHeatSeek, NodeType=Selector, Child[0]=TryAlert, Child[1]=TryUnburrow, Child[2]=MimicBeaconBehavior, Child[3]=SelectHeatSeekMove, Child[4]=GenericAlertHandler)
Behaviors=(BehaviorName=TryAlert, NodeType=Sequence, Child[0]=IsGreenAlert, Child[1]=DisableGroupMove, Child[2]=SelectAnyYellowAlertTarget, Child[3]=SelectAbility-YellowAlert)
Behaviors=(BehaviorName=SelectAnyYellowAlertTarget, NodeType=Sequence, Child[0]=SetTargetStack-YellowAlert, Child[1]=GenericSelectTargetRandomly, Child[2]=HasValidTarget-YellowAlert)
Behaviors=(BehaviorName=SelectAbility-YellowAlert, NodeType=Action)
Behaviors=(BehaviorName=SetTargetStack-YellowAlert, NodeType=Action)
Behaviors=(Behaviorname=HasValidTarget-YellowAlert, NodeType=Condition)

Behaviors=(BehaviorName=ChryssalidGreenAlert, NodeType=Sequence, Child[0]=ShouldPatrol, Child[1]=ChryssalidGreenAbilitySelector)
Behaviors=(BehaviorName=ChryssalidGreenAbilitySelector, NodeType=Selector, Child[0]=ChryssalidUnburrowedProtocol, Child[1]=TryJobUnsafe, Child[2]=GenericGreenMovement)
Behaviors=(BehaviorName=ChryssalidUnburrowedProtocol, NodeType=Sequence, Child[0]=IsUnburrowed, Child[1]=GroupSize1, Child[2]=ChryssalidMoveOrBurrow)
Behaviors=(BehaviorName=ChryssalidMoveOrBurrow, NodeType=Selector, Child[0]=MoveForBurrowIfFirstAction, Child[1]=TryBurrowIfNotOnJob, Child[2]=TryDashMoveForBurrow)
Behaviors=(BehaviorName=MoveForBurrowIfFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=TryBurrowMovement)
Behaviors=(BehaviorName=TryBurrowMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=FindBurrowDestination, Child[2]=DisableGroupMove, Child[3]=SelectAbility-StandardMove)
Behaviors=(BehaviorName=DisableGroupMove, NodeType=Action)
Behaviors=(BehaviorName=TryDashMoveForBurrow, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=UseDashMovement, Child[2]=TryBurrowMovement)
Behaviors=(BehaviorName=FindBurrowDestination, NodeType=Selector, Child[0]=FindLocalBurrowDestination, Child[1]=FindClosestPointToAxisGround)
Behaviors=(BehaviorName=FindLocalBurrowDestination, NodeType=Sequence, Child[0]=SSRestrictToAxisLoSIfInRange, Child[1]=RestrictFromAlliesWithEffect-Burrowed, Child[2]=SSRestrictFromKnownEnemyLoS, Child[3]=SetNoCoverMovement, Child[4]=RestrictToGroundTiles, Child[5]=FindRestrictedDestination-Burrow)
Behaviors=(BehaviorName=SSRestrictToAxisLoSIfInRange, NodeType=Successor, Child[0]=RestrictToAxisLoSIfInRange)
Behaviors=(BehaviorName=SSRestrictFromKnownEnemyLoS, NodeType=Successor, Child[0]=RestrictFromKnownEnemyLoS)
Behaviors=(BehaviorName=RestrictToAxisLoSIfInRange, NodeType=Sequence, Child[0]=IsInMovementRangeOfAxisOfPlay, Child[1]=RestrictToAxisLoS)
Behaviors=(BehaviorName=RestrictToAxisLoS, NodeType=Action)
Behaviors=(BehaviorName=RestrictFromKnownEnemyLoS, NodeType=Action)
Behaviors=(BehaviorName=RestrictToGroundTiles, NodeType=Action)
Behaviors=(BehaviorName=FindClosestPointToAxisGround, NodeType=Action)
Behaviors=(BehaviorName=IsInMovementRangeOfAxisOfPlay, NodeType=Condition)
Behaviors=(BehaviorName=RestrictFromAlliesWithEffect-Burrowed, NodeType=Action, Param[0]="10.0f")
Behaviors=(BehaviorName=GroupSize1, NodeType=StatCondition, Param[0]=GroupSize, Param[1]="<=", Param[2]=1)

Behaviors=(BehaviorName=ChryssalidScamperRoot, NodeType=Selector, Child[0]=SkipIfBurrowed, Child[1]=MoveMeleeFANATICUnsafe, Child[2]=SelectHeatSeekMove)
Behaviors=(BehaviorName=SkipIfBurrowed, NodeType=Sequence, Child[0]=AffectedByEffect-Burrowed, Child[1]=SkipMove)
Behaviors=(BehaviorName=IsUnburrowed, NodeType=Inverter, Child[0]=AffectedByEffect-Burrowed)

; -------------------- Chryssalid Cocoon --------------------------------------
Behaviors=(BehaviorName=CocoonRoot, NodeType=Selector, Child[0]=TrySpawnChryssalid, Child[1]=SkipMove)

; -------------------- Codex (Formerly 'Cyberus') -----------------------------
; @TODO change this to be a randomizer that gives a chance of doing PsiBomb, which is going to be Active(2)
Behaviors=(BehaviorName=TryMoveThenPsiBomb, NodeType=Selector, Child[0]=TryTeleportForPsiBomb, Child[1]=TryMoveForPsiBomb, Child[2]=TryPsiBomb)
Behaviors=(BehaviorName=TryTeleportForPsiBomb, NodeType=Sequence, Child[0]=IsAbilityReady-PsiBombStage1, Child[1]=NotLastActionPoint, Child[2]=FindPotentialAoETargets-PsiBombProfile, Child[3]=TeleportForPsiBombTarget)
Behaviors=(BehaviorName=TryMoveForPsiBomb, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-PsiBombStage1, Child[2]=NotLastActionPoint, Child[3]=FindPotentialAoETargets-PsiBombProfile, Child[4]=MoveStandardIfFirstAbility-PsiBombStage1)

Behaviors=(BehaviorName="Cyberus::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=CodexRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=CodexRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=CodexRedAbilitySelector)
Behaviors=(BehaviorName=CodexRedAbilitySelector, NodeType=Selector, Child[0]=CodexRedFirstAction, Child[1]=CodexRedLastAction)

Behaviors=(BehaviorName=CodexRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=CodexRedFirstActionSelector)
Behaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenPsiBomb, \\
	Child[1]=DoIfFlankedMove_Teleport, \\
	Child[2]=TryTeleportDefensive, \\
	Child[3]=SelectMove_JobOrFlanking, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

Behaviors=(BehaviorName=CodexRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=CodexRedLastActionSelector)
Behaviors=(BehaviorName=CodexRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPsiBomb, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrFlanking)

Behaviors=(BehaviorName=CodexSometimesPsiBomb, NodeType=RandFilter, Child[0]=TryPsiBomb, Param[0]=33)

Behaviors=(BehaviorName=DoIfFlankedMove_Teleport, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=FlankedMoveSelector_Teleport)
Behaviors=(BehaviorName=FlankedMoveSelector_Teleport, NodeType=Selector, Child[0]=TryTeleportDefensive, Child[1]=MoveAdvanceToCoverUnsafe, Child[2]=FallBack)

Behaviors=(BehaviorName="Cyberus::MoveTowardMimicBeacon", NodeType=Selector, Child[0]=TryTeleportTowardMimicBeacon, Child[1]=TryStandardMoveTowardMimicBeacon)
Behaviors=(BehaviorName=TryTeleportTowardMimicBeacon, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=UseDashMovement, Child[2]=FindDestinationTowardMimicBeacon, Child[3]=SelectAbility-Teleport)

; -------------------- GateKeeper ---------------------------------------------
Behaviors=(BehaviorName="Gatekeeper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=GateKeeperRedAlert, Child[3]=GateKeeperNoEnemySightedMove)
Behaviors=(BehaviorName=GateKeeperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=GateKeeperRedAbilitySelector)
Behaviors=(BehaviorName=GateKeeperRedAbilitySelector, NodeType=Selector, Child[0]=GateKeeperRedFirstAction, Child[1]=GateKeeperRedLastAction)

Behaviors=(BehaviorName=GateKeeperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=GateKeeperRedFirstActionSelector)
Behaviors=(BehaviorName=GateKeeperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenAnimaInversionCorpse, \\
	Child[1]=TryMoveThenAnimaInversionMixed, \\
	Child[2]=TryAnimaConsumeOnEnemy, \\
	Child[3]=TryAnimaConsumeOnAlly, \\
	Child[4]=MoveNoCover, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=HuntEnemy)

Behaviors=(BehaviorName=GateKeeperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=GateKeeperRedLastActionSelector)
Behaviors=(BehaviorName=GateKeeperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryAnimaInversionCorpses, \\
	Child[1]=TryAnimaInversionMixed, \\
	Child[2]=TryAnimaConsumeOnEnemy, \\
	Child[3]=TryAnimaConsumeOnAlly, \\
	Child[4]=GateKeeperOpenOrClose, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=MoveNoCover, \\
	Child[7]=HuntEnemy)

;	default to being closed if no enemies are sighted and just moving around
Behaviors=(BehaviorName=GateKeeperNoEnemySightedMove, NodeType=Selector, Child[0]=TryAnimaInversionCorpses, Child[1]=TryAnimaInversionMixed, Child[2]=TryGatekeeperClose, Child[3]=GenericAlertHandler, Child[4]=GenericGreenMovement)

Behaviors=(BehaviorName=GateKeeperOpenOrClose, NodeType=Selector, Child[0]=CloseIfInObviousDanger, Child[1]=DoIfFlankedMove, Child[2]=GateKeeperCheckOpen)
Behaviors=(BehaviorName=CloseIfInObviousDanger, NodeType=Sequence, Child[0]=IsAbilityAvailable-GatekeeperClose, Child[1]=CheckIfInDanger, Child[2]=TryGatekeeperClose)
; Behaviors=(BehaviorName=CheckIfInDanger, NodeType=Selector, Child[0]=IsFlanked, Child[1]=HasMoreThanOneOverwatcher, Child[2]=IsInDangerousArea) ; copied here for reference, but this is a general function
Behaviors=(BehaviorName=GateKeeperCheckOpen, NodeType=Sequence, Child[0]=IsAbilityAvailable-GatekeeperOpen, Child[1]=NoTargetsAvailable, Child[2]=TryGatekeeperOpen) ; open if at high life

; -------------------- Muton --------------------------------------------------
; "Select Attack if Ideal" includes grenade and melee attack if already in position
Behaviors=(BehaviorName="Muton::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=MutonRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=MutonRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MutonRedAbilitySelector)
Behaviors=(BehaviorName=MutonRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MutonRedFirstAction, Child[2]=MutonRedLastAction)

Behaviors=(BehaviorName=MutonRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MutonRedFirstActionSelector)
; Update - removed stand-alone MoveAggressive since it should be linked with the desired ability to be used.
Behaviors=(BehaviorName=MutonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryMoveThenGrenade, \\
	Child[2]=TryMoveToSuppressClosest, \\
	Child[3]=TryTwoTurnAttackSupportIfSafe, \\
	Child[4]=SelectMoveProfileByJob, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

Behaviors=(BehaviorName=MutonRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MutonRedLastActionSelector)
Behaviors=(BehaviorName=MutonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBayonet, \\
	Child[1]=TryGrenade, \\
	Child[2]=TrySuppressClosest, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrAggressive) 

Behaviors=(BehaviorName=TrySuppressClosest, NodeType=Sequence, Child[0]=IsAbilityAvailable-Suppression, Child[1]=CheckShouldSuppressVar, Child[2]=SelectTargetForSuppression, Child[3]=SelectAbility-Suppression)
Behaviors=(BehaviorName=SelectTargetForSuppression, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=SelectBestSuppressionTarget, Child[2]=HasValidTarget-Suppression)

; Updated Suppression for mutons to have a chance of 10% per visible ally.
Behaviors=(BehaviorName=TryMoveToSuppressClosest, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-Suppression, Child[2]=CheckShouldSuppressVar, Child[3]=SelectClosestPotentialSuppressionTarget, Child[4]=MoveStandardIfFirstAbility-Suppression)
Behaviors=(BehaviorName=CheckShouldSuppressVar, NodeType=Sequence, Child[0]=InitSetSuppressVar, Child[1]=ShouldSuppress)
Behaviors=(BehaviorName=ShouldSuppress, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="ShouldSuppress")
Behaviors=(BehaviorName=InitSetSuppressVar, NodeType=Selector, Child[0]=HasBTVar-ShouldSuppress, Child[1]=UpdateShouldSuppressVar)
Behaviors=(BehaviorName=HasBTVar-ShouldSuppress, NodeType=Condition)
Behaviors=(BehaviorName=UpdateShouldSuppressVar, NodeType=Selector, Child[0]=TrySetShouldSuppressTrue, Child[1]=SetShouldSuppressFalse)
Behaviors=(BehaviorName=TrySetShouldSuppressTrue, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=RollForSuppressionPerVisibleAlly, Child[2]=SetShouldSuppressTrue)
Behaviors=(BehaviorName=SetShouldSuppressTrue, NodeType=Action, Param[0]=SetBTVar, Param[1]="ShouldSuppress", Param[2]="1")
Behaviors=(BehaviorName=SetShouldSuppressFalse, NodeType=Action, Param[0]=SetBTVar, Param[1]="ShouldSuppress", Param[2]="0")
Behaviors=(BehaviorName=RollForSuppressionPerVisibleAlly, NodeType=Condition, Param[0]=10); Param[0]=Percent chance per visible ally to succeed.

; -------------------- Psi Zombie ---------------------------------------------
;Behaviors=(BehaviorName=ZombieRoot, NodeType=Selector, Child[0]=ShootIfAvailable, Child[1]=MoveMelee )
Behaviors=(BehaviorName="PsiZombie::CharacterRoot", NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=GenericEnemyMeleeRootFANATIC)

; -------------------- Sectoid AI BEHAVIOR TREE NODES BEGIN -------------------
Behaviors=(BehaviorName="Sectoid::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidRedAlert, Child[3]=SectoidNoEnemySightedMove)
Behaviors=(BehaviorName=SectoidRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectoidRedAbilitySelector)
Behaviors=(BehaviorName=SectoidRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidRedFirstAction, Child[2]=SectoidRedLastAction)

Behaviors=(BehaviorName=SectoidRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectoidRedFirstActionSelector)
Behaviors=(BehaviorName=SectoidRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMove_JobOrDefensive, \\
	Child[2]=TryPsiReanimationOrMindSpinOption, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover)

Behaviors=(BehaviorName=SectoidRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectoidRedLastActionSelector)
Behaviors=(BehaviorName=SectoidRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPsiReanimationOrMindSpinOption, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrDefensive)

; 66% chance to PsiReanimate, 33% chance to Mind Spin ( if both are available ).  Otherwise use whatever is available.
Behaviors=(BehaviorName=TryPsiReanimationOrMindSpinOption, NodeType=RandSelector, Child[0]=TryPsiReanimation, Param[0]=90, Child[1]=TryMindSpinOption, Param[1]=10)
Behaviors=(BehaviorName=TryMindSpinOption, NodeType=Sequence, Child[0]=IsAbilityAvailable-MindSpin, Child[1]=SelectTargetForMindSpin, Child[2]=SelectAbility-MindSpin)
Behaviors=(BehaviorName=SectoidNoEnemySightedMove, NodeType=Selector, Child[0]=GenericOrangeMovement, Child[1]=SectoidYellowAlert, Child[2]=GenericGreenMovement)
Behaviors=(BehaviorName=SectoidYellowAlert, NodeType=Sequence, Child[0]=IsYellowAlert, Child[1]=SectoidYellowAbilitySelector)
Behaviors=(BehaviorName=SectoidYellowAbilitySelector, NodeType=Selector, Child[0]=TryPsiReanimation, Child[1]=GenericAlertHandler)

; -------------------- Viper --------------------------------------------------
Behaviors=(BehaviorName="Viper::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=ViperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ViperRedAbilitySelector)
Behaviors=(BehaviorName=ViperRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperRedFirstAction, Child[2]=ViperRedLastAction)

Behaviors=(BehaviorName=ViperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ViperRedFirstActionSelector)
Behaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=ConsiderTonguePullPriorityOrMelee, \\
	Child[1]=TryGetOverHere, \\
	Child[2]=TryMoveThenPoisonSpit, \\
	Child[3]=TryMoveThenPoisonSpitSingle, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

Behaviors=(BehaviorName=ViperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ViperRedLastActionSelector)
Behaviors=(BehaviorName=ViperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryPoisonSpit, \\
	Child[2]=TryGetOverHere, \\
	Child[3]=TryPoisonSpitSingle, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=DoIfFlankedMove, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SelectMoveStandard)

Behaviors=(BehaviorName="Viper::MoveTowardMimicBeacon", NodeType=Selector, Child[0]=RandTryGetOverHereOnMimicBeacon, Child[1]=TryMeleeMoveTowardMimicBeacon, Child[2]=TryStandardMoveTowardMimicBeacon)
Behaviors=(BehaviorName=RandTryGetOverHereOnMimicBeacon, NodeType=RandFilter, Child[0]=TryGetOverHereOnMimicBeacon, Param[0]=50)
Behaviors=(BehaviorName=TryGetOverHereOnMimicBeacon, NodeType=Sequence, Child[0]=IsAbilityAvailable-GetOverHere, Child[1]=SelectMimicBeaconForGetOverHere, Child[2]=SelectAbility-GetOverHere)
Behaviors=(BehaviorName=SelectMimicBeaconForGetOverHere, NodeType=Sequence, Child[0]=SetTargetStack-GetOverHere, Child[1]=SelectMimicBeaconTarget, Child[2]=HasValidTarget-GetOverHere)
;Slight deviation from standard BT here - If we selected a standard move for melee, then check to see if we should override this with a Tongue Pull.
Behaviors=(BehaviorName=ConsiderTonguePullPriorityOrMelee, NodeType=Sequence, Child[0]=TryStandardMelee, Child[1]=SS_ConsiderTonguePullOverMove)
Behaviors=(BehaviorName=SS_ConsiderTonguePullOverMove, NodeType=Successor, Child[0]=ConsiderTonguePullOverMove)
Behaviors=(BehaviorName=ConsiderTonguePullOverMove, NodeType=Sequence, Child[0]=IsSelectedAbility-StandardMove, Child[1]=IsAbilityAvailable-GetOverHere, Child[2]=SetPotentialTargetAsCurrentTarget, Child[3]=ShouldUseTonguePullOnTarget, Child[4]=SelectAbility-GetOverHere)
Behaviors=(BehaviorName=SetPotentialTargetAsCurrentTarget, NodeType=Action)
Behaviors=(BehaviorName=ShouldUseTonguePullOnTarget, NodeType=Sequence, Child[0]=IsValidTonguePullTarget, Child[1]=TargetDistanceGreaterThan4Tiles, Child[2]=TonguePullHitChance50, Child[3]=SetTargetPotential-GetOverHere)
Behaviors=(BehaviorName=TargetDistanceGreaterThan4Tiles, NodeType=StatCondition, Param[0]=PotentialTargetDistance, Param[1]=">", Param[2]=6); 6m = 4 tiles
Behaviors=(BehaviorName=TonguePullHitChance50, NodeType=StatCondition, Param[0]=PotentialHitChance-GetOverHere, Param[1]=">=", Param[2]=50)

Behaviors=(BehaviorName=IsSelectedAbility-StandardMove, NodeType=Condition)
Behaviors=(BehaviorName=SetTargetPotential-GetOverHere, NodeType=Action); Set target of 'Potential' to the target of ability 'GetOverHere'.

Behaviors=(BehaviorName="Viper::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=TargetNotValidForBind, Child[1]=AddToTargetScore_-1000) ;Overwrite option for melee abilities that are restricted.
Behaviors=(BehaviorName=TargetNotValidForBind, NodeType=Selector, Child[0]=TargetIsAlien, Child[1]=TargetIsRobotic)

; -------------------- Faceless -----------------------------------------------
; ("Try Standard Melee" includes "attempt to move to melee range")
Behaviors=(BehaviorName="Faceless::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement, Child[2]=FacelessHeatSeekProtocol, Child[3]=FacelessRedAlert, Child[4]=GenericAlertHandler)
Behaviors=(BehaviorName=FacelessRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=FacelessRedAbilitySelector)
Behaviors=(BehaviorName=FacelessRedAbilitySelector, NodeType=Selector, Child[0]=FacelessRedFirstAction, Child[1]=FacelessRedLastAction)

Behaviors=(BehaviorName=FacelessRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=FacelessFirstActionSelector);
Behaviors=(BehaviorName=FacelessFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryScythingClaws, \\
	Child[1]=MoveMeleeFANATICUnsafe, \\
	Child[2]=HuntEnemyUnsafe)

Behaviors=(BehaviorName=FacelessRedLastAction, NodeType=Selector, \\
	Child[0]=TryScythingClaws, \\
	Child[1]=MoveMeleeFANATICUnsafe, \\
	Child[2]=HuntEnemyUnsafe)

Behaviors=(BehaviorName="Faceless::AttackMimicBeacon", NodeType=Sequence, Child[0]=TryScythingClaws)

Behaviors=(BehaviorName=FacelessHeatSeekProtocol, NodeType=Sequence, Child[0]=FacelessShouldTriggerHeatSeek, Child[1]=SelectHeatSeekMove)
Behaviors=(BehaviorName=FacelessShouldTriggerHeatSeek, NodeType=Selector, Child[0]=NoVisibleEnemies)
; -------------------- Sectopod -----------------------------------------------
Behaviors=(BehaviorName="Sectopod::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectopodRedAlert, Child[3]=GenericAlertHandler)
Behaviors=(BehaviorName=SectopodRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectopodRedAbilitySelector)
Behaviors=(BehaviorName=SectopodRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectopodRedFirstAction, Child[2]=SectopodRedSecondAction, Child[3]=SectopodRedLastAction)

Behaviors=(BehaviorName=SectopodRedFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=SectopodFirstActionSelector)
Behaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryFirstMoveTowardVisibleEnemies50, \\
	Child[4]=ShootIfAvailable, \\
	Child[5]=TryWrathCannonS166, \\
	Child[6]=TryMoveForLightningField, \\
	Child[7]=MoveNoCover, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemy)

Behaviors=(BehaviorName=SectopodRedSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectopodSecondActionSelector)
Behaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryMoveTowardVisibleEnemies50, \\
	Child[4]=TryWrathCannonS166, \\
	Child[5]=TryMoveForLightningField, \\
	Child[6]=MoveNoCoverIfNotMoved, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemy)

Behaviors=(BehaviorName=SectopodRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectopodRedLastActionSelector)
Behaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryWrathCannonS1, \\
	Child[2]=TryLightningField, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)

;Behaviors=(BehaviorName=IsInHighStance, NodeType=StatCondition, Param[0]=UnitValue-HighLowValue, Param[1]="==", Param[2]=1)
;Behaviors=(BehaviorName=IsInLowStance, NodeType=StatCondition, Param[0]=UnitValue-HighLowValue, Param[1]="==", Param[2]=0)
; Stand Up ability
Behaviors=(BehaviorName=MoveNoCoverIfNotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=MoveNoCover)
Behaviors=(BehaviorName=TryStandUp, NodeType=Sequence, Child[0]=IsAbilityAvailable-SectopodHigh, Child[1]=SelectAbility-SectopodHigh)
Behaviors=(BehaviorName=IsAbilityAvailable-SectopodHigh, NodeType=Condition)
Behaviors=(BehaviorName=SelectAbility-SectopodHigh, NodeType=Action)

Behaviors=(BehaviorName=TryWrathCannonS166, NodeType=RandFilter, Child[0]=TryWrathCannon, Param[0]=66)

; blaster fire is only valid action while charging the canon)
Behaviors=(BehaviorName=SectopodCannonCharging, NodeType=Sequence, Child[0]=AffectedByEffect-WrathCannonStage1Effect, Child[1]=SectopodChargingSelector)
Behaviors=(BehaviorName=SectopodChargingSelector, NodeType=Selector, Child[0]=TryShootOrReloadIfNotLastActionPoint, Child[1]=Overwatch50IfLastAction, Child[2]=TryShootOrReloadOrOverwatch, Child[3]=SkipMove)
Behaviors=(BehaviorName=Overwatch50IfLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RandOverwatch50)
Behaviors=(BehaviorName=TryShootOrReloadIfNotLastActionPoint, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=TryShootOrReload)

;Lightning Strike ability
Behaviors=(BehaviorName=IsAbilityAvailable-SectopodLightningField, NodeType=Condition)
Behaviors=(BehaviorName=IsAbilityReady-SectopodLightningField, NodeType=Condition)
Behaviors=(BehaviorName=SelectAbility-SectopodLightningField, NodeType=Action)
Behaviors=(BehaviorName=TryLightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-SectopodLightningField, Child[1]=HasAnyLightningFieldTargets, Child[2]=SelectAbility-SectopodLightningField)
Behaviors=(BehaviorName=HasAnyLightningFieldTargets, NodeType=StatCondition, Param[0]=AbilityTargetUnitCount-SectopodLightningField, Param[1]=">", Param[2]=1); >1 because it always sets itself as the primary target.
Behaviors=(BehaviorName=TryFirstMoveTowardVisibleEnemies50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=TryMoveForLightningField50)
Behaviors=(BehaviorName=TryMoveTowardVisibleEnemies50, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=DidntJustMove, Child[2]=TryMoveForLightningField50)
Behaviors=(BehaviorName=TryMoveForLightningField50, NodeType=RandFilter, Child[0]=TryMoveForLightningField, Param[0]=50)
Behaviors=(BehaviorName=TryMoveForLightningField, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=SafeToMove, Child[2]=IsAbilityReady-SectopodLightningField, Child[3]=MoveStandardIfFirstAbility-LightningField, Child[4]=MoveMeleeFANATICUnsafe)
Behaviors=(BehaviorName=MoveStandardIfFirstAbility-LightningField, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=NotLastActionPoint, Child[2]=FindLightningFieldDestination, Child[3]=SelectAbility-StandardMove)
Behaviors=(BehaviorName=FindLightningFieldDestination, NodeType=Sequence, Child[0]=SelectTargetForLightningField, Child[1]=ResetDestinationSearch, Child[2]=RestrictToAbilityRange-SectopodLightningField, Child[3]=RestrictToEnemyLoS, Child[4]=FindRestrictedDestination-Standard)
Behaviors=(BehaviorName=SelectTargetForLightningField, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForMelee, Child[2]=HasValidTarget-Potential)
Behaviors=(BehaviorName=RestrictToAbilityRange-SectopodLightningField, NodeType=Action)

Behaviors=(BehaviorName=WasLastAbility-StandardMove, NodeType=Condition)
Behaviors=(BehaviorName=DidntJustMove, NodeType=Inverter, Child[0]=WasLastAbility-StandardMove)