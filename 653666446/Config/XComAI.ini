[XComGame.X2AIBTBehaviorTree]
;Riftkeeper
+Behaviors=(BehaviorName="RiftkeeperRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=RiftkeeperRedAlert, Child[3]=RiftkeeperNoEnemySightedMove)
+Behaviors=(BehaviorName=RiftkeeperRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=RiftkeeperRedAbilitySelector)
+Behaviors=(BehaviorName=RiftkeeperRedAbilitySelector, NodeType=Selector, Child[0]=RiftkeeperRedFirstAction, Child[1]=RiftkeeperRedLastAction)

+Behaviors=(BehaviorName=RiftkeeperRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=RiftkeeperRedFirstActionSelector)
+Behaviors=(BehaviorName=RiftkeeperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportalstrong, \\
	Child[1]=TryRiftportal, \\
	Child[2]=TryRKStasis, \\
	Child[3]=RKTryAnimaConsumeOnEnemy, \\
	Child[4]=RKTryAnimaConsumeOnAlly, \\
	Child[5]=NCMoveDefensive, \\
	Child[6]=ShootIfAvailable, \\
	Child[7]=HuntEnemy)
+Behaviors=(BehaviorName=RiftkeeperRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=RiftkeeperRedLastActionSelector)
+Behaviors=(BehaviorName=RiftkeeperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryRiftportalstrong, \\
	Child[1]=TryRiftportal, \\
	Child[2]=RKTryAnimaConsumeOnEnemy, \\
	Child[3]=RKTryAnimaConsumeOnAlly, \\
	Child[4]=TryRKStasis, \\
	Child[5]=TryGatekeeperClose, \\
	Child[6]=NCMoveFOW, \\
	Child[7]=ShootIfAvailable, \\
	Child[8]=SkipMove)

;default to being closed if no enemies are sighted and just moving around
+Behaviors=(BehaviorName=RiftkeeperNoEnemySightedMove, NodeType=Selector, Child[0]=TryGatekeeperClose, Child[1]=GenericAlertHandler, Child[2]=GenericGreenMovement)

;Stasis behaviours
+Behaviors=(BehaviorName=IsAbilityReady-RKStasis, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperClosed")
+Behaviors=(BehaviorName=IsAbilityAvailable-RKStasis, NodeType=Condition)
+Behaviors=(BehaviorName=HasValidTarget-RKStasis, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RKStasis, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-RKStasis, NodeType=Action)
+Behaviors=(BehaviorName=SelectTargetForRKStasis, NodeType=Sequence, Child[0]=SetTargetStack-RKStasis, Child[1]=GenericSelectTargetSomewhatRandomly, Child[2]=HasValidTarget-RKStasis)

+Behaviors=(BehaviorName=TryRKStasis, NodeType=Selector, Child[0]=TryRKStasisActivate, Child[1]=TryGatekeeperOpenIfTryRKStasisReady)
+Behaviors=(BehaviorName=TryRKStasisActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-RKStasis, Child[1]=SelectTargetForRKStasis, Child[2]=SelectAbility-RKStasis)
+Behaviors=(BehaviorName=TryGatekeeperOpenIfTryRKStasisReady, NodeType=Sequence, Child[0]=IsAbilityReady-RKStasis, Child[1]=AnyLivingEnemyVisible, Child[2]=TryRiftkeeperOpen)

;Riftportal behaviours
+Behaviors=(BehaviorName=TryRiftportal, NodeType=Selector, Child[0]=TryRiftportalActivate, Child[1]=TryGatekeeperCloseIfRiftportalReady) 
+Behaviors=(BehaviorName=TryRiftportalActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-Riftportal, Child[1]=AnyLivingEnemyVisible, Child[2]=SelectAbility-Riftportal)
+Behaviors=(BehaviorName=TryGatekeeperCloseIfRiftportalReady, NodeType=Sequence, Child[0]=IsAbilityReady-Riftportal, Child[1]=AnyLivingEnemyVisible, Child[2]=TryGatekeeperClose)

+Behaviors=(BehaviorName=IsAbilityReady-Riftportal, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperOpened")
+Behaviors=(BehaviorName=IsAbilityAvailable-Riftportal, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Riftportal, NodeType=Action)

+Behaviors=(BehaviorName=TryRiftportalstrong, NodeType=Selector, Child[0]=TryRiftportalstrongActivate, Child[1]=TryGatekeeperCloseIfRiftportalstrongReady) 
+Behaviors=(BehaviorName=TryRiftportalstrongActivate, NodeType=Sequence, Child[0]=IsAbilityAvailable-Riftportalstrong, Child[1]=AnyLivingEnemyVisible, Child[2]=SelectAbility-Riftportalstrong)
+Behaviors=(BehaviorName=TryGatekeeperCloseIfRiftportalstrongReady, NodeType=Sequence, Child[0]=IsAbilityReady-Riftportalstrong, Child[1]=AnyLivingEnemyVisible, Child[2]=TryGatekeeperClose)

+Behaviors=(BehaviorName=IsAbilityReady-Riftportalstrong, NodeType=Condition, Param[0]="AA_ValueCheckFailed", Param[1]="AA_GatekeeperOpened")
+Behaviors=(BehaviorName=IsAbilityAvailable-Riftportalstrong, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Riftportalstrong, NodeType=Action)

;Riftportal on scamper
+Behaviors=(BehaviorName=ScamperRoot_Riftportal, NodeType=Selector, \\
		Child[0]=CounterBeaglerushManeuver, \\
		Child[1]=TryRiftportal, \\
		Child[2]=NCMoveDefensive, \\
		Child[3]=MoveNoCoverUnsafe, \\
		Child[4]=SkipMove)

;coward move
+Behaviors=(BehaviorName=NCMoveFOW, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NCMoveFOWUnsafe)
+Behaviors=(BehaviorName=NCMoveFOWUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=SSRestrictFromKnownEnemyLoS, Child[3]=SetNoCoverMovement, Child[4]=FindRestrictedDestination-FallBack, Child[5]=SelectAbility-StandardMove)

;Retract
+Behaviors=(BehaviorName=TryRKRetract, NodeType=Sequence, Child[0]=IsAbilityAvailable-RKRetract, Child[1]=SelectAbility-RKRetract)
+Behaviors=(BehaviorName=IsAbilityAvailable-RKRetract, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RKRetract, NodeType=Action)

;Equivalentabilities for new open/close ability
+EquivalentAbilities=(KeyName=GatekeeperClose, EquivalentAbilityName[0]=RiftkeeperClose)

;new Riftkeeperopen behaviour (close not necessary because of Equivalentabilities)
+Behaviors=(BehaviorName=TryRiftkeeperOpen, NodeType=Sequence, Child[0]=AffectedByEffect-RiftkeeperClosedEffect, Child[1]=IsAbilityAvailable-RiftkeeperOpen, Child[2]=SelectAbility-RiftkeeperOpen)
+Behaviors=(BehaviorName=AffectedByEffect-RiftkeeperClosedEffect, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-RiftkeeperOpen, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RiftkeeperOpen, NodeType=Action)

;New Anima Consume necessary because of new Open-behaviour
+Behaviors=(BehaviorName=RKTryAnimaConsumeOnEnemy, NodeType=Sequence, Child[0]=HasWounds, Child[1]=IsAbilityReady-AnimaConsume, Child[2]=RKAnimaConsumeStepSelectorEnemy)
+Behaviors=(BehaviorName=RKAnimaConsumeStepSelectorEnemy, NodeType=Selector, Child[0]=AnimaConsumeAttackEnemy, Child[1]=RKAnimaConsumeAttackEnemyUnopened, Child[2]=MoveMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RKAnimaConsumeAttackEnemyUnopened, NodeType=Sequence, Child[0]=AnimaConsumeNotAvailable, Child[1]=SelectPotentialTargetForEnemyAnimaConsume, Child[2]=IsTargetInAttackRange-StandardMelee, Child[3]=TryRiftkeeperOpen)

+Behaviors=(BehaviorName=RKTryAnimaConsumeOnAlly, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=IsVisibleToPlayer, Child[2]=IsAbilityReady-AnimaConsume, Child[3]=RKAnimaConsumeStepSelectorAlly)
+Behaviors=(BehaviorName=RKAnimaConsumeStepSelectorAlly, NodeType=Selector, Child[0]=AnimaConsumeAttackAlly, Child[1]=RKAnimaConsumeAttackAllyUnopened, Child[2]=MoveToPotentialMeleeIfFirstAbilityFANATIC)
+Behaviors=(BehaviorName=RKAnimaConsumeAttackAllyUnopened, NodeType=Sequence, Child[0]=AnimaConsumeNotAvailable, Child[1]=SelectPotentialTargetForAllyAnimaConsume, Child[2]=IsTargetInAttackRange-StandardMelee, Child[3]=TryRiftkeeperOpen)